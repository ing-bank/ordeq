Output:
NodeGraph:
  Edges:
     view_train_test_split:split -> [view_train_test_split:train]
     view_train_test_split:train -> []
  Nodes:
     View(name=view_train_test_split:split, inputs=[Literal(     A  B    C   gt
0  foo  1  one  2.0
1  bar  2  one  5.0
2  foo  3  two  8.0)])
     View(name=view_train_test_split:train, inputs=[View(name=view_train_test_split:split, inputs=[Literal(     A  B    C   gt
0  foo  1  one  2.0
1  bar  2  one  5.0
2  foo  3  two  8.0)])])
Training          B   gt
count  3.0  3.0
mean   2.0  5.0
std    1.0  3.0
min    1.0  2.0
25%    1.5  3.5
50%    2.0  5.0
75%    2.5  6.5
max    3.0  8.0
{View(name=view_train_test_split:split, inputs=[Literal(     A  B    C   gt
0  foo  1  one  2.0
1  bar  2  one  5.0
2  foo  3  two  8.0)]): (     A  B    C   gt
0  foo  1  one  2.0
1  foo  3  two  8.0
2  bar  2  one  5.0, Empty DataFrame
Columns: [A, B, C, gt]
Index: []), View(name=view_train_test_split:train, inputs=[View(name=view_train_test_split:split, inputs=[Literal(     A  B    C   gt
0  foo  1  one  2.0
1  bar  2  one  5.0
2  foo  3  two  8.0)])]): None}

Logging:
INFO	ordeq.io	Loading Literal(     A  B    C   gt
0  foo  1  one  2.0
1  bar  2  one  5.0
2  foo  3  two  8.0)
INFO	ordeq.runner	Running node View(name=view_train_test_split:split, inputs=[Literal(     A  B    C   gt
0  foo  1  one  2.0
1  bar  2  one  5.0
2  foo  3  two  8.0)])
INFO	ordeq.runner	Running node View(name=view_train_test_split:train, inputs=[IO(idx=ID1)])