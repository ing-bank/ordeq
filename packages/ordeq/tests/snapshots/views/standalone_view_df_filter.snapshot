Output:
NodeGraph:
  Edges:
     standalone_view_df_filter:filter_df -> [standalone_view_df_filter:group_by]
     standalone_view_df_filter:group_by -> []
  Nodes:
     View(name=standalone_view_df_filter:filter_df, inputs=(Literal(     A  B      C    D
0  foo  1    one  2.0
1  bar  2    one  5.0
2  foo  3    two  8.0
3  bar  4  three  1.0
4  foo  5    two  2.0
5  bar  6    two  9.0
6  foo  7    one  3.0
7  foo  8  three  4.0), Literal(0    False
1    False
2    False
3    False
4     True
5     True
6     True
7     True
Name: B, dtype: bool)))
     View(name=standalone_view_df_filter:group_by, inputs=(View(name=standalone_view_df_filter:filter_df, inputs=(Literal(     A  B      C    D
0  foo  1    one  2.0
1  bar  2    one  5.0
2  foo  3    two  8.0
3  bar  4  three  1.0
4  foo  5    two  2.0
5  bar  6    two  9.0
6  foo  7    one  3.0
7  foo  8  three  4.0), Literal(0    False
1    False
2    False
3    False
4     True
5     True
6     True
7     True
Name: B, dtype: bool))),))
{View(name=standalone_view_df_filter:filter_df, inputs=(Literal(     A  B      C    D
0  foo  1    one  2.0
1  bar  2    one  5.0
2  foo  3    two  8.0
3  bar  4  three  1.0
4  foo  5    two  2.0
5  bar  6    two  9.0
6  foo  7    one  3.0
7  foo  8  three  4.0), Literal(0    False
1    False
2    False
3    False
4     True
5     True
6     True
7     True
Name: B, dtype: bool))):      A    B      C    D
0  NaN  NaN    NaN  NaN
1  NaN  NaN    NaN  NaN
2  NaN  NaN    NaN  NaN
3  NaN  NaN    NaN  NaN
4  foo  5.0    two  2.0
5  bar  6.0    two  9.0
6  foo  7.0    one  3.0
7  foo  8.0  three  4.0, View(name=standalone_view_df_filter:group_by, inputs=(View(name=standalone_view_df_filter:filter_df, inputs=(Literal(     A  B      C    D
0  foo  1    one  2.0
1  bar  2    one  5.0
2  foo  3    two  8.0
3  bar  4  three  1.0
4  foo  5    two  2.0
5  bar  6    two  9.0
6  foo  7    one  3.0
7  foo  8  three  4.0), Literal(0    False
1    False
2    False
3    False
4     True
5     True
6     True
7     True
Name: B, dtype: bool))),)): None}

Logging:
INFO	ordeq.io	Loading Literal(     A  B      C    D
0  foo  1    one  2.0
1  bar  2    one  5.0
2  foo  3    two  8.0
3  bar  4  three  1.0
4  foo  5    two  2.0
5  bar  6    two  9.0
6  foo  7    one  3.0
7  foo  8  three  4.0)
INFO	ordeq.io	Loading Literal(0    False
1    False
2    False
3    False
4     True
5     True
6     True
7     True
Name: B, dtype: bool)
INFO	ordeq.runner	Running node View(name=standalone_view_df_filter:filter_df, inputs=(Literal(     A  B      C    D
0  foo  1    one  2.0
1  bar  2    one  5.0
2  foo  3    two  8.0
3  bar  4  three  1.0
4  foo  5    two  2.0
5  bar  6    two  9.0
6  foo  7    one  3.0
7  foo  8  three  4.0), Literal(0    False
1    False
2    False
3    False
4     True
5     True
6     True
7     True
Name: B, dtype: bool)))
INFO	ordeq.runner	Running node View(name=standalone_view_df_filter:group_by, inputs=(IO(idx=ID1),))

Typing:
packages/ordeq/tests/resources/views/standalone_view_df_filter.py:21: error: No overload variant of "where" of "DataFrame" matches argument type "str"  [call-overload]
packages/ordeq/tests/resources/views/standalone_view_df_filter.py:21: note: Possible overload variants:
packages/ordeq/tests/resources/views/standalone_view_df_filter.py:21: note:     def where(self, cond: Series[Any] | DataFrame | ndarray[tuple[Any, ...], dtype[Any]] | Callable[[DataFrame], DataFrame] | Callable[[Any], bool], other: Any = ..., *, inplace: Literal[True], axis: Literal['index', 0] | Literal['columns', 1] | None = ..., level: Hashable | None = ...) -> None
packages/ordeq/tests/resources/views/standalone_view_df_filter.py:21: note:     def where(self, cond: Series[Any] | DataFrame | ndarray[tuple[Any, ...], dtype[Any]] | Callable[[DataFrame], DataFrame] | Callable[[Any], bool], other: Any = ..., *, inplace: Literal[False] = ..., axis: Literal['index', 0, 'columns', 1] | None = ..., level: Hashable | None = ...) -> DataFrame
Found 1 error in 1 file (checked 1 source file)