name: Build

on:
  pull_request:
    branches:
      - main

env:
  pythonVersion: '3.10'

jobs:
  docs:
    name: Build docs
    uses: ./.github/workflows/docs.yml

  packages:
    name: List packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.list-packages.outputs.packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: List packages in repository
        id: list-packages
        run: |
          echo "packages=$(ls packages/ | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> ${GITHUB_OUTPUT}

  static_code_analysis:
    name: Check formatting, linting and typing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install the project
        run: uv sync --all-packages --all-groups --all-extras

      - name: Check formatting
        run: uv run just format

      - name: Check linting
        run: uv run just lint

      - name: Check markdown formatting (mdformat)
        run: uv run just mdformat

      - name: Check typing (ty)
        run: uv run just ty

      - name: Check typing (mypy)
        run: uv run just mypy

  test:
    name: Test
    needs: [ packages, static_code_analysis, docs ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.packages.outputs.packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          save-cache: false

      - name: Install the package
        # The 'types' group is needed for snapshot testing
        run: uv sync --package ${{ matrix.package }} --group test --group types --locked

      - name: Run unit tests
        run: uv run --group test --group types pytest -v --cov-report=xml:coverage.xml --cov-report=html --cov-append --cov="packages/${{ matrix.package }}/" --cov-fail-under=0 --cov-branch "packages/${{ matrix.package }}/" --locked

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: '**/coverage.xml'
