name: Build

on:
  pull_request:
    branches:
      - main

# Cancel in-progress runs on the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  pythonVersion: '3.13'

jobs:
  docs:
    name: Build docs
    uses: ./.github/workflows/docs.yml

  packages:
    name: List changed packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.list-packages.outputs.packages }}
      changed-packages: ${{ steps.list-changed-packages.outputs.changed-packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: List changed packages
        id: list-changed-packages
        run: |
          uv run scripts/list_changed_packages.py
          changed_pkgs="changed-packages=$(cat scripts/changed_packages.json)"
          echo "$changed_pkgs"
          uv run scripts/list_dependencies.py
          uv run scripts/relevant_packages.py
          relevant_pkgs="changed-packages=$(cat scripts/relevant_packages.json)"
          echo "$relevant_pkgs"
          echo "$relevant_pkgs" >> ${GITHUB_OUTPUT}

      - name: List packages
        id: list-packages
        run: |
          all_pkgs="packages=$(ls packages/ | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')"
          echo "$all_pkgs"
          echo "$all_pkgs" >> ${GITHUB_OUTPUT}

  static_code_analysis:
    name: Check formatting, linting and typing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install the project
        run: uv sync --all-packages --all-groups --all-extras

      - name: Check formatting
        run: uv run just format

      - name: Check linting
        run: uv run just lint

      - name: Check markdown formatting (mdformat)
        run: uv run just mdformat

      - name: Check typing (ty)
        run: uv run just ty

      - name: Check typing (mypy)
        run: uv run just mypy

  test:
    name: Test
    needs: [ packages, static_code_analysis, docs ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.packages.outputs.packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          save-cache: false

      - name: Install the package
        run: uv sync --package ${{ matrix.package }} --group test --locked

      - name: Run unit tests
        run: uv run --group test pytest -xv --cov-report=xml:coverage.xml --cov-report=html --cov-append --cov="packages/${{ matrix.package }}/" --cov-fail-under=0 --cov-branch "packages/${{ matrix.package }}/"

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: '**/coverage.xml'

  complete:
    name: All checks passed
    runs-on: ubuntu-latest
    if: always()
    needs:
      - test
      - static_code_analysis
      - docs
      - packages

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
