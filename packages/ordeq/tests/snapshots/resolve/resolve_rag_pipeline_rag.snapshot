Output:
['rag_pipeline', 'rag_pipeline.catalog', 'rag_pipeline.rag', 'rag_pipeline.rag.annotation', 'rag_pipeline.rag.evaluation', 'rag_pipeline.rag.indexer', 'rag_pipeline.rag.policies', 'rag_pipeline.rag.question_answering', 'rag_pipeline.rag.retrieval']
['rag_pipeline.rag.annotation:annotate_documents', 'rag_pipeline.rag.evaluation:evaluate_answers', 'rag_pipeline.rag.indexer:create_vector_index', 'rag_pipeline.rag.policies:generate_questions', 'rag_pipeline.rag.question_answering:question_answering', 'rag_pipeline.rag.retrieval:filter_relevant', 'rag_pipeline.rag.retrieval:retrieve']
{('rag_pipeline.catalog', 'index'): IO(idx=ID1), ('rag_pipeline.catalog', 'llm_answers'): IO(idx=ID2), ('rag_pipeline.catalog', 'llm_model'): IO(idx=ID3), ('rag_pipeline.catalog', 'llm_vision_retrieval_model'): IO(idx=ID4), ('rag_pipeline.catalog', 'metrics'): IO(idx=ID5), ('rag_pipeline.catalog', 'pdf_documents'): IO(idx=ID6), ('rag_pipeline.catalog', 'pdfs_documents_annotated'): IO(idx=ID7), ('rag_pipeline.catalog', 'policies'): IO(idx=ID8), ('rag_pipeline.catalog', 'questions'): IO(idx=ID9), ('rag_pipeline.catalog', 'relevant_pages'): IO(idx=ID10), ('rag_pipeline.catalog', 'retrieved_pages'): IO(idx=ID11)}
['rag_pipeline.rag.annotation:annotate_documents', 'rag_pipeline.rag.evaluation:evaluate_answers', 'rag_pipeline.rag.indexer:create_vector_index', 'rag_pipeline.rag.policies:generate_questions', 'rag_pipeline.rag.question_answering:question_answering', 'rag_pipeline.rag.retrieval:filter_relevant', 'rag_pipeline.rag.retrieval:retrieve']